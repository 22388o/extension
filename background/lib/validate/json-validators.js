"use strict";module.exports = validate20;module.exports.default = validate20;const schema22 = {"type":"object","required":[],"additionalProperties":{"type":"object","properties":{"last_updated_at":{"type":"number"}},"required":["last_updated_at"],"additionalProperties":{"type":"number","nullable":true},"nullable":true}};function validate20(data, {instancePath="", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == "object" && !Array.isArray(data)){for(const key0 in data){let data0 = data[key0];const _errs2 = errors;if((!(data0 && typeof data0 == "object" && !Array.isArray(data0))) && (data0 !== null)){validate20.errors = [{instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/additionalProperties/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}if(errors === _errs2){if(data0 && typeof data0 == "object" && !Array.isArray(data0)){let missing0;if((data0.last_updated_at === undefined) && (missing0 = "last_updated_at")){validate20.errors = [{instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/additionalProperties/required",keyword:"required",params:{missingProperty: missing0},message:"must have required property '"+missing0+"'"}];return false;}else {const _errs5 = errors;for(const key1 in data0){if(!(key1 === "last_updated_at")){let data1 = data0[key1];const _errs6 = errors;if((!((typeof data1 == "number") && (isFinite(data1)))) && (data1 !== null)){validate20.errors = [{instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/" + key1.replace(/~/g, "~0").replace(/\//g, "~1"),schemaPath:"#/additionalProperties/additionalProperties/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}var valid1 = _errs6 === errors;if(!valid1){break;}}}if(_errs5 === errors){if(data0.last_updated_at !== undefined){let data2 = data0.last_updated_at;if(!((typeof data2 == "number") && (isFinite(data2)))){validate20.errors = [{instancePath:instancePath+"/" + key0.replace(/~/g, "~0").replace(/\//g, "~1")+"/last_updated_at",schemaPath:"#/additionalProperties/properties/last_updated_at/type",keyword:"type",params:{type: "number"},message:"must be number"}];return false;}}}}}}var valid0 = _errs2 === errors;if(!valid0){break;}}}else {validate20.errors = [{instancePath,schemaPath:"#/type",keyword:"type",params:{type: "object"},message:"must be object"}];return false;}}validate20.errors = vErrors;return errors === 0;}